name: Build and Create Pre-Release

on:
    push:
        branches: VEC-168-init

    workflow_dispatch:
        inputs:
            addCommit:
                description: 'Dev build?'
                required: false
                type: boolean
            deletePrevBuild:
              description: 'Delete existing pre-releases?'
              required: false
              type: boolean
jobs:
    build-and-release:
        runs-on: macos-13
        steps:
            - name: "Git checkout"
              uses: actions/checkout@v3
            - name: "Install Homebrew"
              run: /bin/bash -c "NONINTERACTIVE=1 $(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
            - name: "Install Dependencies"
              run: |
                /usr/local/bin/brew install --overwrite python@3.11 || echo "I1.1"
                /usr/local/bin/brew link --overwrite python@3.11 || echo "I1.2"
                /usr/local/bin/brew install --overwrite dpkg upx zip make wget jq rpm || echo "I2"
                /usr/local/bin/brew link --overwrite python@3.11 || echo "I1.3"
                /usr/local/bin/brew install python-gdbm@3.11 || echo "I1.4"
                /usr/local/bin/brew install python-tk@3.11 || echo "I1.5"
                for i in dpkg upx zip make wget jq rpm python3.11; do command -v $i || exit 1; done
                echo "Dependencies checked"
            - name: "Install golang"
              run: |
                wget https://go.dev/dl/go1.22.2.darwin-amd64.pkg
                sudo installer -store -pkg go1.22.2.darwin-amd64.pkg -target /
            - name: "Install Packages.pkg for making macos PKG files"
              run: |
                wget http://s.sudre.free.fr/Software/files/Packages.dmg
                hdiutil attach -mountpoint /Volumes/Packages Packages.dmg
                cd /Volumes/Packages
                sudo installer -pkg Install\ Packages.pkg -target /
            - name: "Compile"
              env:
                  ADDCOMMIT: ${{ inputs.addCommit }}
              run: |
                buildcmd="build-prerelease"
                [ "${ADDCOMMIT}" = "false" ] && buildcmd="build-official"
                export PATH=$PATH:/usr/local/bin:/usr/local/go/bin
                cd ~/work/asvec/asvec && make cleanall && make ${buildcmd}
            - name: "Create linux packages"
              env:
                  ADDCOMMIT: ${{ inputs.addCommit }}
              run: |
                buildcmd="build-prerelease"
                [ "${ADDCOMMIT}" = "false" ] && buildcmd="build-official"
                export PATH=$PATH:/usr/local/bin:/usr/local/go/bin
                cd ~/work/asvec/asvec && make pkg-linux
            - name: "Create windows zips"
              env:
                  ADDCOMMIT: ${{ inputs.addCommit }}
              run: |
                buildcmd="build-prerelease"
                [ "${ADDCOMMIT}" = "false" ] && buildcmd="build-official"
                export PATH=$PATH:/usr/local/bin:/usr/local/go/bin
                cd ~/work/asvec/asvec && make pkg-windows-zip
            - name: "Print asvec version"
              run: cd ~/work/asvec/asvec && ./bin/asvec-macos-amd64 version
            - name: "Prepare keychain for signing MacOS"
              env:
                  keypw: ${{ secrets.APPLEPW }}
                  INSTALLERP12: ${{ secrets.INSTALLERP12 }}
                  APPLICATIONP12: ${{ secrets.APPLICATIONP12 }}
              run: |
                set -e
                security create-keychain -p mysecretpassword build.keychain
                security default-keychain -s build.keychain
                security unlock-keychain -p mysecretpassword build.keychain
                security set-keychain-settings build.keychain
                security unlock-keychain -p mysecretpassword build.keychain
                echo "$APPLICATIONP12" | base64 -d > app.p12
                echo "$INSTALLERP12" | base64 -d > install.p12
                security import app.p12 -k build.keychain -P $keypw -A
                security import install.p12 -k build.keychain -P $keypw -A
                security set-key-partition-list -S apple-tool:,apple: -s -k mysecretpassword build.keychain
            - name: "Sign and build MacOS"
              env:
                  xasvec_appleid: ${{ secrets.APPLEUSER }}
                  xasvec_applepw: ${{ secrets.APPLEPW }}
                  xasvec_signer: ${{ secrets.APPLESIGNER }}
                  xasvec_installsigner: ${{ secrets.APPLEINSTALLSIGNER }}
                  xasvec_teamid: ${{ secrets.APPLETEAMID }}
              run: |
                set -e
                export asvec_appleid="${xasvec_appleid}"
                export asvec_applepw="${xasvec_applepw}"
                export asvec_signer="${xasvec_signer}"
                export asvec_installsigner="${xasvec_installsigner}"
                export asvec_teamid="${xasvec_teamid}"
                export PATH=$PATH:/usr/local/bin:/usr/local/go/bin && cd ~/work/asvec/asvec && make macos-build-all && make macos-notarize-all
            - name: "Create a new pre-release"
              env:
                  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  ADDCOMMIT: ${{ inputs.addCommit }}
              run: |
                set -e
                echo "${ADDCOMMIT}"
                cd ~/work/asvec/asvec/bin/packages
                COMMIT=$(git rev-parse --short HEAD)
                VER=$(cat ../../VERSION.md)
                BRANCH=$(git rev-parse --abbrev-ref HEAD)
                TAG=${VER}-${COMMIT}
                [ "${ADDCOMMIT}" = "false" ] && TAG=${VER}
                FULLCOMMIT=$(git rev-parse HEAD)
                gh release create -R github.com/aerospike/asvec --notes-file ../../RELEASE.md --prerelease --target ${FULLCOMMIT} --title "Asvec - v${TAG}" ${TAG} asvec-linux-amd64-${VER}.deb asvec-linux-amd64-${VER}.rpm asvec-linux-amd64-${VER}.zip asvec-linux-arm64-${VER}.deb asvec-linux-arm64-${VER}.rpm asvec-linux-arm64-${VER}.zip asvec-macos-${VER}.pkg asvec-macos-amd64-${VER}.zip asvec-macos-arm64-${VER}.zip asvec-windows-amd64-${VER}.zip asvec-windows-arm64-${VER}.zip
            - name: "Delete previous pre-release"
              env:
                  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  DELPREV: ${{ inputs.deletePrevBuild }}
              run: |
                if [ "${DELPREV}" = "true" ]
                then
                  set -e
                  gh release list -R github.com/aerospike/asvec -L 100 |grep Pre-release |awk -F'\t' '{print $3}' |while read line
                  do
                    if [ "$line" != "${TAG}" ]
                    then
                      if [[ $line =~ ^${VER}- ]]
                      then
                        echo "Removing $line"
                        gh release delete $line -R github.com/aerospike/asvec --yes --cleanup-tag
                      fi
                    fi
                  done
                fi