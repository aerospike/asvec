name: Security Scans
permissions:
  contents: read
  pull-requests: write
on:
  pull_request:
  push:
    branches: [ main ]
env:
    BUILD_PROJECT: 'vector'
    BUILD_NAME: 'asvec'

jobs:
  snyk-scan:
    runs-on: ubuntu-latest
    outputs:
      code-status: ${{ steps.code-scan.outputs.status }}
    steps:
      - name: 'Git checkout'
        uses: actions/checkout@v4

      - name: Setup Snyk
        uses: snyk/actions/setup@master

      - name: Run Snyk code scan
        id: code-scan
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          set -x
          snyk test --json --severity-threshold=high || EXIT_CODE=$?
          
          # Generate full report even when vulnerabilities found
          snyk test --json --security-threshold=low --sarif-file-output=snyk-code-report.sarif > snyk-code-report.json || true
          
          if [ -z "$EXIT_CODE" ] || [ "$EXIT_CODE" -eq "0" ]; then
            echo "No high/critical vulnerabilities found in code"
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "High or Critical vulnerabilities found in code (and not ignored)"
            echo "status=failure" >> $GITHUB_OUTPUT
          fi
      - name: Upload scan results
        uses: actions/upload-artifact@v4
        with:
            name: snyk-code-reports
            path: snyk-*-report*
            retention-days: 7
  
  docker-scan:
    runs-on: ubuntu-latest
    outputs:
      container-status: ${{ steps.container-scan.outputs.status }}
    steps: 
      - name: 'Git checkout'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up QEMU
        uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392 # v3.6.0
        with:
          platforms: all
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@b5ca514318bd6ebac0fb2aedd5d36ec1b5c232a2 # v3.10.0


      - name: Build and Push Docker Image
        run: |
          docker buildx bake \
            --set asvec.tags=asvec:latest \
            --file docker/asvec.docker/bake.amd64.hcl \
            --load 
        env:
          DOCKER_BUILDKIT: '1'
      - name: Setup Snyk
        uses: snyk/actions/setup@b98d498629f1c368650224d6d212bf7dfa89e4bf # v0.4.0
          
      - name: Run Snyk container scan
        id: container-scan
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          set -x
          snyk container test asvec:latest --json --severity-threshold=high || EXIT_CODE=$?
          
          # Generate full report even when vulnerabilities found
          snyk container test asvec:latest --json --security-threshold=low --sarif-file-output=snyk-container-report.sarif > snyk-container-report.json || true
          
          if [ -z "$EXIT_CODE" ] || [ "$EXIT_CODE" -eq "0" ]; then
            echo "No high/critical vulnerabilities found in container"
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "High or Critical vulnerabilities found in container (and not ignored)"
            echo "status=failure" >> $GITHUB_OUTPUT
          fi
      - name: Upload scan results
        uses: actions/upload-artifact@v4
        with:
            name: snyk-container-reports
            path: snyk-*-report*
            retention-days: 7


  report-results:
    needs: [snyk-scan, docker-scan]
    runs-on: ubuntu-latest
    steps:
      - name: 'Git checkout'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install @security-alert/sarif-to-markdown

      - name: Download scan results
        uses: actions/download-artifact@v4
        with:
          name: snyk-code-reports
          path: code-reports/

      - name: Download container scan results
        uses: actions/download-artifact@v4
        with:
          name: snyk-container-reports
          path: container-reports/

      - name: Show artifacts
        run: find .

      - name: Update PR with results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const processor = require('./.github/scripts/process-security-results.js');
            
            async function updatePR() {
              // Get the comment content
              const result = await processor.run();
              console.log(JSON.stringify({"processor": result}, null, "  "));
              
              // Find existing comment
              const { data: comments } = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
              });
              
              const botComment = comments.find(c => 
                c.user.type === 'Bot' && 
                c.body.includes(result.title)
              );
              
              const commentBody = `### ${result.title}\n${result.body}`;
              // TODO: disabling updates to comments for now
              if (false &&botComment) {
                // Update existing comment
                await github.rest.issues.updateComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: botComment.id,
                  body: commentBody
                });
              } else {
                // Create new comment
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  body: commentBody
                });
              }
            }

            // Execute the async function
            await updatePR();

  check-status:
    needs: [snyk-scan, docker-scan, report-results]
    runs-on: ubuntu-latest
    if: always()  # Run even if previous jobs failed
    steps:
      - name: Check scan results
        run: |
          if [ "${{ needs.snyk-scan.outputs.code-status }}" = "failure" ] || [ "${{ needs.docker-scan.outputs.container-status }}" = "failure" ]; then
            echo "High or Critical vulnerabilities found in scans"
            exit 1
          else
            echo "No high/critical vulnerabilities found"
          fi
          