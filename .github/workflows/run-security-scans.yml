name: Security Scans
permissions:
  contents: read
  pull-requests: write
on:
  pull_request:
  push:
    branches: [ main ]
env:
    BUILD_PROJECT: 'vector'
    BUILD_NAME: 'asvec'

jobs:
  snyk-scan:
    runs-on: ubuntu-latest
    outputs:
      code-status: ${{ steps.code-scan.outputs.status }}
    steps:
      - name: 'Git checkout'
        uses: actions/checkout@v4

      - name: Setup Snyk
        uses: snyk/actions/setup@master

      - name: Run Snyk code scan
        id: code-scan
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          set -x
          # Run scan on Go code and save results
          snyk test --json --severity-threshold=high || EXIT_CODE=$?
          
          if [ -z "$EXIT_CODE" ] || [ "$EXIT_CODE" -eq "0" ]; then
            # No high/critical vulnerabilities found running report for low
            snyk test --json --security-threshold=low --sarif-file-output=snyk-code-report.sarif > snyk-code-report.json || true
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "High or Critical vulnerabilities found in code (and not ignored)"
            echo "status=failure" >> $GITHUB_OUTPUT
            exit 1
          fi
      - name: Upload scan results
        uses: actions/upload-artifact@v4
        with:
            name: snyk-code-reports
            path: snyk-*-report*
            retention-days: 7
  
  docker-scan:
    runs-on: ubuntu-latest
    outputs:
      container-status: ${{ steps.container-scan.outputs.status }}
    steps: 
      - name: 'Git checkout'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up QEMU
        uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392 # v3.6.0
        with:
          platforms: all
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@b5ca514318bd6ebac0fb2aedd5d36ec1b5c232a2 # v3.10.0


      - name: Build and Push Docker Image
        run: |
          docker buildx bake \
            --set asvec.tags=asvec:latest \
            --file docker/asvec.docker/bake.amd64.hcl \
            --load 
        env:
          DOCKER_BUILDKIT: '1'
      - name: Setup Snyk
        uses: snyk/actions/setup@b98d498629f1c368650224d6d212bf7dfa89e4bf # v0.4.0
          
      - name: Run Snyk container scan
        id: container-scan
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          set -x
          # Run scan on container and save results
          snyk container test asvec:latest \
            --json --severity-threshold=high  || EXIT_CODE=$?
          if [ -z "$EXIT_CODE" ] || [ "$EXIT_CODE" -eq "0" ]; then
            # No high/critical vulnerabilities found running report for low
            snyk container test asvec:latest --json --security-threshold=low --sarif-file-output=snyk-container-report.sarif > snyk-container-report.json || true
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "High or Critical vulnerabilities found in container (and not ignored)"
            echo "status=failure" >> $GITHUB_OUTPUT
            exit 1
          fi
      - name: Upload scan results
        uses: actions/upload-artifact@v4
        with:
            name: snyk-container-reports
            path: snyk-*-report*
            retention-days: 7


  report-results:
    needs: [snyk-scan, docker-scan]
    runs-on: ubuntu-latest
    steps:

      - name: 'Git checkout'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Download scan results
        uses: actions/download-artifact@v4
        with:
          name: snyk-code-reports
          path: code-reports/
      - name: Download container scan results
        uses: actions/download-artifact@v4
        with:
          name: snyk-container-reports
          path: container-reports/
      - name: show artifacts
        run: find .
      - name: Comment PR with results
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          script: |
            const fs = require('fs');
            const codeReport = JSON.parse(fs.readFileSync('code-reports/snyk-code-report.json', 'utf8'));
            const containerReport = JSON.parse(fs.readFileSync('container-reports/snyk-container-report.json', 'utf8'));
            
            let comment = '## 🔒 Security Scan Results\n\n';
            
            // Code scan results
            comment += '### 📝 Code Scan\n';
            if (codeReport.vulnerabilities && codeReport.vulnerabilities.length > 0) {
              comment += '⚠️ Found vulnerabilities:\n';
              codeReport.vulnerabilities.forEach(vuln => {
                const severityEmoji = vuln.severity === 'critical' ? '🚨' : '⚠️';
                comment += `${severityEmoji} ${vuln.title} (${vuln.severity})\n`;
              });
            } else {
              comment += '✅ No vulnerabilities found.\n';
            }
            
            // Container scan results
            comment += '\n### 🐳 Container Scan\n';
            if (containerReport.vulnerabilities && containerReport.vulnerabilities.length > 0) {
              comment += '⚠️ Found vulnerabilities:\n';
              containerReport.vulnerabilities.forEach(vuln => {
                const severityEmoji = vuln.severity === 'critical' ? '🚨' : '⚠️';
                comment += `${severityEmoji} ${vuln.title} (${vuln.severity})\n`;
              });
            } else {
              comment += '✅ No vulnerabilities found.\n';
            }
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
